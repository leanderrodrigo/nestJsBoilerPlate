trigger:
  branches:
    include:
      - dev
pool:
  vmImage: ubuntu-latest

resources:
- repo: self

variables:
  k8srvcon: 'peopleproducts-aks-gb-dev-people-product-dev'
  dockerRegistryServiceConnection: '59c6c384-71a6-4d40-860f-907368ffc0b4'
  imageRepository: 'api-boilerplate'
  containerRegistry: 'peopleproductsacr.azurecr.io'
  dockerfilePath: $(Build.SourcesDirectory)/Dockerfile
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  k8sNamespace: people-product-dev

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
    - job: Build
      displayName: Build
      pool: 
        vmImage: $(vmImageName)
      steps:
      - task: Npm@1
        displayName: Npm install
        inputs:
          command: ci # Required. Command. Default: install
          workingDir: $(Build.SourcesDirectory)
      - script:
              npm run lint
      - task: Docker@2
        displayName: Build image to container registry
        inputs:
          command: build
          repository: $(imageRepository)
          Dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: $(tag) 
      - task: Docker@2
        displayName: Push image to container
        inputs:
          command: push
          repository: $(imageRepository) 
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: $(tag) 
      - task: Docker@2
        displayName: build latest image to container registry
        inputs:
          command: build
          repository: $(imageRepository)
          Dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: 'latest' 
      - task: Docker@2
        displayName: Push latest image to container
        inputs:
          command: push
          repository: $(imageRepository) 
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: 'latest'         
      
      - task: PublishPipelineArtifact@1
        displayName: 'Publish manifests artifact'
        inputs:
          artifactName: 'manifests'
          targetPath:  $(Build.SourcesDirectory)

# - stage: test
#   displayName: Test stage
#   jobs:
#   - job: Test
#     displayName: Code test
#     steps:
#       - task: SonarQubePrepare@5
#         displayName: Connection with SonarQube
#         inputs:
#             SonarQube: 'Sonar connection'
#             scannerMode: 'CLI'
#             configMode: 'manual'
#             cliProjectKey: 'GHQ_ABI_PEOPLE_TECH_PLATFORM_GHQ_ABI_API_BOILERPLATE_AYSl2h8Xq_CLVXBg1sUU'
#             cliProjectName: ''
#             cliSources: '.'
#       - task: SonarQubeAnalyze@5
#       - task: SonarQubePublish@5
#         inputs:
#           pollingTimeoutSec: '300'      
    
- stage: CD 
  displayName: Deploy stage
  jobs:
  - deployment:  deployment
    displayName: Select environment
    environment: Development
        
  - job: Deploy
    displayName: Deploy 
    pool: 
     vmImage: $(vmImageName)         
    steps:
      - task: KubernetesManifest@0
        displayName: Deploy
        inputs:
            action: deploy
            kubernetesServiceConnection: $(K8srvcon)
            namespace: $(k8sNamespace)
            manifests: |
                pipelines/development/manifests/*.yml
                pipelines/development/manifests/*.yml
            containers: |
                $(containerRegistry)/${imageRepository}:$(tag)
      - task: Kubernetes@1
        displayName: image update
        inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: $(K8srvcon)
            namespace: 'people-product-dev'
            command: 'set'
            arguments: 'image deployment/api-boilerplate api-boilerplate=$(containerRegistry)/api-boilerplate:$(tag)'
            secretType: 'dockerRegistry'
            containerRegistryType: 'Azure Container Registry'